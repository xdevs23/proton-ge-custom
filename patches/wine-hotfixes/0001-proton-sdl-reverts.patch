From f6184669eb60764eabf790932685ea4177ac82a5 Mon Sep 17 00:00:00 2001
From: GloriousEggroll <gloriouseggroll@gmail.com>
Date: Tue, 20 Apr 2021 20:25:05 -0600
Subject: [PATCH] proton sdl reverts

---
 ...nd-rawinput-messages-with-HID-report.patch |  20 +-
 ...ign-rawinput-handles-through-device-.patch |  51 +++--
 5 files changed, 310 insertions(+), 90 deletions(-)
 create mode 100644 patches/ntdll-Syscall_Emulation/0001-ntdll-Support-x86_64-syscall-emulation.patch.orig

diff --git a/patches/user32-rawinput-hid/0005-hidclass.sys-Use-__wine_send_input-to-send-device-no.patch b/patches/user32-rawinput-hid/0005-hidclass.sys-Use-__wine_send_input-to-send-device-no.patch
index 4d4b1631..e8b39bb9 100644
--- a/patches/user32-rawinput-hid/0005-hidclass.sys-Use-__wine_send_input-to-send-device-no.patch
+++ b/patches/user32-rawinput-hid/0005-hidclass.sys-Use-__wine_send_input-to-send-device-no.patch
@@ -1,4 +1,4 @@
-From db0ad0a517ca74f0b166d515eb9fdb15d06d695a Mon Sep 17 00:00:00 2001
+From 4b24ceb11c3b77ecd1e00d7145be370f7192bbbb Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
 Date: Fri, 19 Mar 2021 14:16:16 +0100
 Subject: [PATCH] hidclass.sys: Use __wine_send_input to send device
@@ -23,11 +23,11 @@ with INPUT_HARDWARE type / WM_INPUT uMsg instead).
 Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=50506
 ---
  dlls/hidclass.sys/Makefile.in |  2 +-
- dlls/hidclass.sys/pnp.c       | 38 +++++++++++++++++++++++++++++++++++
- 2 files changed, 39 insertions(+), 1 deletion(-)
+ dlls/hidclass.sys/pnp.c       | 36 +++++++++++++++++++++++++++++++++++
+ 2 files changed, 37 insertions(+), 1 deletion(-)
 
 diff --git a/dlls/hidclass.sys/Makefile.in b/dlls/hidclass.sys/Makefile.in
-index 4b1e9338eb4..09281c118b4 100644
+index be4af747853..2f9f30f8bef 100644
 --- a/dlls/hidclass.sys/Makefile.in
 +++ b/dlls/hidclass.sys/Makefile.in
 @@ -1,6 +1,6 @@
@@ -35,53 +35,52 @@ index 4b1e9338eb4..09281c118b4 100644
  IMPORTLIB = hidclass
 -IMPORTS   = hal ntoskrnl
 +IMPORTS   = hal ntoskrnl user32
+ DELAYIMPORTS = setupapi hid
  
  EXTRADLLFLAGS = -mno-cygwin
- 
 diff --git a/dlls/hidclass.sys/pnp.c b/dlls/hidclass.sys/pnp.c
-index de6f409a16b..9a1dcee192b 100644
+index a499aec93bb..8e539dfe6b7 100644
 --- a/dlls/hidclass.sys/pnp.c
 +++ b/dlls/hidclass.sys/pnp.c
-@@ -26,6 +26,7 @@
+@@ -25,6 +25,7 @@
  #include "ddk/hidtypes.h"
  #include "ddk/wdm.h"
  #include "regstr.h"
 +#include "winuser.h"
  #include "wine/debug.h"
- #include "wine/asm.h"
  #include "wine/list.h"
-@@ -97,6 +98,9 @@ static UINT32 alloc_rawinput_handle(void)
-     return InterlockedIncrement(&counter);
+ 
+@@ -69,6 +70,9 @@ static NTSTATUS get_device_id(DEVICE_OBJECT *device, BUS_QUERY_ID_TYPE type, WCH
+     return status;
  }
  
 +/* make sure bRawData can hold two bytes without requiring additional allocation */
 +C_ASSERT(offsetof(RAWINPUT, data.hid.bRawData[2]) < sizeof(RAWINPUT));
 +
- static NTSTATUS WINAPI driver_add_device(DRIVER_OBJECT *driver, DEVICE_OBJECT *bus_pdo)
+ NTSTATUS WINAPI PNP_AddDevice(DRIVER_OBJECT *driver, DEVICE_OBJECT *PDO)
  {
      WCHAR device_id[MAX_DEVICE_ID_LEN], instance_id[MAX_DEVICE_ID_LEN];
-@@ -159,6 +163,8 @@ static void create_child(minidriver *minidriver, DEVICE_OBJECT *fdo)
-     WCHAR pdo_name[255];
-     USAGE page, usage;
-     NTSTATUS status;
+@@ -79,6 +83,8 @@ NTSTATUS WINAPI PNP_AddDevice(DRIVER_OBJECT *driver, DEVICE_OBJECT *PDO)
+     BASE_DEVICE_EXTENSION *ext = NULL;
+     HID_DESCRIPTOR descriptor;
+     BYTE *reportDescriptor;
 +    RAWINPUT rawinput;
 +    INPUT input;
      INT i;
  
-     status = call_minidriver(IOCTL_HID_GET_DEVICE_ATTRIBUTES, fdo, NULL, 0, &attr, sizeof(attr));
-@@ -247,6 +253,23 @@ static void create_child(minidriver *minidriver, DEVICE_OBJECT *fdo)
-             sizeof(HID_XFER_PACKET) + pdo_ext->u.pdo.preparsed_data->caps.InputReportByteLength);
+     if ((status = get_device_id(PDO, BusQueryDeviceID, device_id)))
+@@ -187,6 +193,21 @@ NTSTATUS WINAPI PNP_AddDevice(DRIVER_OBJECT *driver, DEVICE_OBJECT *PDO)
+ 
+     HID_StartDeviceThread(device);
  
-     HID_StartDeviceThread(child_pdo);
-+
 +    rawinput.header.dwType = RIM_TYPEHID;
 +    rawinput.header.dwSize = offsetof(RAWINPUT, data.hid.bRawData[2]);
-+    rawinput.header.hDevice = ULongToHandle(pdo_ext->u.pdo.rawinput_handle);
++    rawinput.header.hDevice = ULongToHandle(ext->rawinput_handle);
 +    rawinput.header.wParam = GIDC_ARRIVAL;
 +    rawinput.data.hid.dwCount = 1;
 +    rawinput.data.hid.dwSizeHid = 2;
-+    rawinput.data.hid.bRawData[0] = pdo_ext->u.pdo.preparsed_data->caps.UsagePage;
-+    rawinput.data.hid.bRawData[1] = pdo_ext->u.pdo.preparsed_data->caps.Usage;
++    rawinput.data.hid.bRawData[0] = ext->preparseData->caps.UsagePage;
++    rawinput.data.hid.bRawData[1] = ext->preparseData->caps.Usage;
 +
 +    input.type = INPUT_HARDWARE;
 +    input.u.hi.uMsg = WM_INPUT_DEVICE_CHANGE;
@@ -89,32 +88,31 @@ index de6f409a16b..9a1dcee192b 100644
 +    input.u.hi.wParamL = (WORD)(rawinput.header.dwSize >> 0);
 +    __wine_send_input(0, &input, &rawinput);
 +
-+    fdo->Flags &= ~DO_DEVICE_INITIALIZING;
+     return STATUS_SUCCESS;
  }
  
- static NTSTATUS fdo_pnp(DEVICE_OBJECT *device, IRP *irp)
-@@ -409,6 +432,21 @@ static NTSTATUS pdo_pnp(DEVICE_OBJECT *device, IRP *irp)
-         case IRP_MN_REMOVE_DEVICE:
-         {
-             IRP *queued_irp;
-+            RAWINPUT rawinput;
-+            INPUT input;
+@@ -194,6 +215,21 @@ static NTSTATUS remove_device(minidriver *minidriver, DEVICE_OBJECT *device, IRP
+ {
+     BASE_DEVICE_EXTENSION *ext = device->DeviceExtension;
+     NTSTATUS rc = STATUS_NOT_SUPPORTED;
++    RAWINPUT rawinput;
++    INPUT input;
 +
-+            rawinput.header.dwType = RIM_TYPEHID;
-+            rawinput.header.dwSize = offsetof(RAWINPUT, data.hid.bRawData[0]);
-+            rawinput.header.hDevice = ULongToHandle(ext->u.pdo.rawinput_handle);
-+            rawinput.header.wParam = GIDC_REMOVAL;
-+            rawinput.data.hid.dwCount = 0;
-+            rawinput.data.hid.dwSizeHid = 0;
++    rawinput.header.dwType = RIM_TYPEHID;
++    rawinput.header.dwSize = offsetof(RAWINPUT, data.hid.bRawData[0]);
++    rawinput.header.hDevice = ULongToHandle(ext->rawinput_handle);
++    rawinput.header.wParam = GIDC_REMOVAL;
++    rawinput.data.hid.dwCount = 0;
++    rawinput.data.hid.dwSizeHid = 0;
 +
-+            input.type = INPUT_HARDWARE;
-+            input.u.hi.uMsg = WM_INPUT_DEVICE_CHANGE;
-+            input.u.hi.wParamH = (WORD)(rawinput.header.dwSize >> 16);
-+            input.u.hi.wParamL = (WORD)(rawinput.header.dwSize >> 0);
-+            __wine_send_input(0, &input, &rawinput);
++    input.type = INPUT_HARDWARE;
++    input.u.hi.uMsg = WM_INPUT_DEVICE_CHANGE;
++    input.u.hi.wParamH = (WORD)(rawinput.header.dwSize >> 16);
++    input.u.hi.wParamL = (WORD)(rawinput.header.dwSize >> 0);
++    __wine_send_input(0, &input, &rawinput);
  
-             IoSetDeviceInterfaceState(&ext->u.pdo.link_name, FALSE);
-             if (ext->u.pdo.is_mouse)
+     rc = IoSetDeviceInterfaceState(&ext->link_name, FALSE);
+     if (rc)
 -- 
 2.30.2
 
diff --git a/patches/user32-rawinput-hid/0013-hidclass.sys-Send-rawinput-messages-with-HID-report.patch b/patches/user32-rawinput-hid/0013-hidclass.sys-Send-rawinput-messages-with-HID-report.patch
index 74561a56..f5415a08 100644
--- a/patches/user32-rawinput-hid/0013-hidclass.sys-Send-rawinput-messages-with-HID-report.patch
+++ b/patches/user32-rawinput-hid/0013-hidclass.sys-Send-rawinput-messages-with-HID-report.patch
@@ -1,4 +1,4 @@
-From 478c213d97d8894d734d8f711f6d4c75d9ea84fa Mon Sep 17 00:00:00 2001
+From 7819fe251e3f12eda8ee615aa735b1870a49e3b9 Mon Sep 17 00:00:00 2001
 From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
 Date: Fri, 5 Mar 2021 10:41:20 +0100
 Subject: [PATCH] hidclass.sys: Send rawinput messages with HID report.
@@ -9,10 +9,10 @@ Wine-Bug: https://bugs.winehq.org/show_bug.cgi?id=50506
  1 file changed, 35 insertions(+)
 
 diff --git a/dlls/hidclass.sys/device.c b/dlls/hidclass.sys/device.c
-index ec34b6b8068..887d7212c89 100644
+index 9a3c92b3576..551816aa4fe 100644
 --- a/dlls/hidclass.sys/device.c
 +++ b/dlls/hidclass.sys/device.c
-@@ -171,6 +171,39 @@ static NTSTATUS copy_packet_into_buffer(HID_XFER_PACKET *packet, BYTE* buffer, U
+@@ -254,6 +254,39 @@ static NTSTATUS copy_packet_into_buffer(HID_XFER_PACKET *packet, BYTE* buffer, U
          return STATUS_BUFFER_OVERFLOW;
  }
  
@@ -25,13 +25,13 @@ index ec34b6b8068..887d7212c89 100644
 +    INPUT input;
 +
 +    data_size = offsetof(RAWINPUT, data.hid.bRawData) + packet->reportBufferLen;
-+    if (!(id = ext->u.pdo.preparsed_data->reports[0].reportID)) data_size += 1;
++    if (!(id = ext->preparseData->reports[0].reportID)) data_size += 1;
 +
 +    rawinput = HeapAlloc(GetProcessHeap(), 0, data_size);
 +
 +    rawinput->header.dwType = RIM_TYPEHID;
 +    rawinput->header.dwSize = data_size;
-+    rawinput->header.hDevice = ULongToHandle(ext->u.pdo.rawinput_handle);
++    rawinput->header.hDevice = ULongToHandle(ext->rawinput_handle);
 +    rawinput->header.wParam = RIM_INPUT;
 +    rawinput->data.hid.dwCount = 1;
 +    rawinput->data.hid.dwSizeHid = data_size - offsetof(RAWINPUT, data.hid.bRawData);
@@ -52,18 +52,18 @@ index ec34b6b8068..887d7212c89 100644
  static void HID_Device_processQueue(DEVICE_OBJECT *device)
  {
      IRP *irp;
-@@ -242,6 +275,7 @@ static DWORD CALLBACK hid_device_thread(void *args)
-             if (irp_status.u.Status == STATUS_SUCCESS)
+@@ -337,6 +370,7 @@ static DWORD CALLBACK hid_device_thread(void *args)
+             if (irp->IoStatus.u.Status == STATUS_SUCCESS)
              {
-                 RingBuffer_Write(ext->u.pdo.ring_buffer, packet);
+                 RingBuffer_Write(ext->ring_buffer, packet);
 +                HID_Device_sendRawInput(device, packet);
                  HID_Device_processQueue(device);
              }
  
-@@ -282,6 +316,7 @@ static DWORD CALLBACK hid_device_thread(void *args)
+@@ -383,6 +417,7 @@ static DWORD CALLBACK hid_device_thread(void *args)
                  else
                      packet->reportId = 0;
-                 RingBuffer_Write(ext->u.pdo.ring_buffer, packet);
+                 RingBuffer_Write(ext->ring_buffer, packet);
 +                HID_Device_sendRawInput(device, packet);
                  HID_Device_processQueue(device);
              }
diff --git a/patches/user32-rawinput-hid/0017-hidclass.sys-Assign-rawinput-handles-through-device-.patch b/patches/user32-rawinput-hid/0017-hidclass.sys-Assign-rawinput-handles-through-device-.patch
index e3c11a87..34bf736b 100644
--- a/patches/user32-rawinput-hid/0017-hidclass.sys-Assign-rawinput-handles-through-device-.patch
+++ b/patches/user32-rawinput-hid/0017-hidclass.sys-Assign-rawinput-handles-through-device-.patch
@@ -1,51 +1,48 @@
-From 0f24bf7b15e0e22fda2106e8573b5422b80eaa04 Mon Sep 17 00:00:00 2001
+From 613004e02a06a93598c45f323fe5b4cd9c989194 Mon Sep 17 00:00:00 2001
 From: Arkadiusz Hiler <ahiler@codeweavers.com>
 Date: Wed, 10 Feb 2021 13:23:33 +0100
 Subject: [PATCH] hidclass.sys: Assign rawinput handles through device
  properties.
 
 ---
- dlls/hidclass.sys/pnp.c | 13 +++++++++++++
- 1 file changed, 13 insertions(+)
+ dlls/hidclass.sys/device.c | 12 ++++++++++++
+ 1 file changed, 12 insertions(+)
 
-diff --git a/dlls/hidclass.sys/pnp.c b/dlls/hidclass.sys/pnp.c
-index 1d82215bbfe..7eaa28a411d 100644
---- a/dlls/hidclass.sys/pnp.c
-+++ b/dlls/hidclass.sys/pnp.c
-@@ -25,6 +25,8 @@
- #include "ntddmou.h"
- #include "ddk/hidtypes.h"
- #include "ddk/wdm.h"
-+#include "initguid.h"
+diff --git a/dlls/hidclass.sys/device.c b/dlls/hidclass.sys/device.c
+index 551816aa4fe..fb571bea314 100644
+--- a/dlls/hidclass.sys/device.c
++++ b/dlls/hidclass.sys/device.c
+@@ -33,11 +33,14 @@
+ 
+ #include "initguid.h"
+ #include "devguid.h"
 +#include "devpkey.h"
- #include "regstr.h"
- #include "winuser.h"
- #include "wine/debug.h"
-@@ -87,6 +89,8 @@ static NTSTATUS get_device_id(DEVICE_OBJECT *device, BUS_QUERY_ID_TYPE type, WCH
-     return irp_status.u.Status;
- }
+ #include "ntddmou.h"
+ 
+ WINE_DEFAULT_DEBUG_CHANNEL(hid);
+ WINE_DECLARE_DEBUG_CHANNEL(hid_report);
  
 +DEFINE_DEVPROPKEY(DEVPROPKEY_HID_HANDLE, 0xbc62e415, 0xf4fe, 0x405c, 0x8e, 0xda, 0x63, 0x6f, 0xb5, 0x9f, 0x08, 0x98, 2);
 +
- /* user32 reserves 1 & 2 for winemouse and winekeyboard,
-  * keep this in sync with user_private.h */
- #define WINE_MOUSE_HANDLE 1
-@@ -241,6 +245,15 @@ static NTSTATUS WINAPI driver_add_device(DRIVER_OBJECT *driver, DEVICE_OBJECT *b
+ NTSTATUS HID_CreateDevice(DEVICE_OBJECT *native_device, HID_MINIDRIVER_REGISTRATION *driver, DEVICE_OBJECT **device)
+ {
+     WCHAR dev_name[255];
+@@ -144,6 +147,15 @@ NTSTATUS HID_LinkDevice(DEVICE_OBJECT *device)
      else
-         pdo_ext->u.pdo.rawinput_handle = alloc_rawinput_handle();
+         ext->rawinput_handle = alloc_rawinput_handle();
  
-+    status = IoSetDevicePropertyData(child_pdo, &DEVPROPKEY_HID_HANDLE, LOCALE_NEUTRAL,
++    status = IoSetDevicePropertyData(device, &DEVPROPKEY_HID_HANDLE, LOCALE_NEUTRAL,
 +                                     PLUGPLAY_PROPERTY_PERSISTENT, DEVPROP_TYPE_UINT32,
-+                                     sizeof(pdo_ext->u.pdo.rawinput_handle), &pdo_ext->u.pdo.rawinput_handle);
++                                     sizeof(ext->rawinput_handle), &ext->rawinput_handle);
 +    if (status != STATUS_SUCCESS)
 +    {
 +        FIXME("failed to set device property %x\n", status);
 +        return status;
 +    }
 +
-     pdo_ext->u.pdo.poll_interval = DEFAULT_POLL_INTERVAL;
+     return STATUS_SUCCESS;
  
-     pdo_ext->u.pdo.ring_buffer = RingBuffer_Create(
+ error:
 -- 
 2.30.2
 
-- 
2.30.2

