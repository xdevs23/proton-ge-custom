From f649de43236f67943a44ae89dfbbd3d4c7d9eeb4 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 17 Dec 2020 18:47:44 +0100
Subject: [PATCH] HACK: steam: winex11.drv: Check Steam overlay presence and
 drop events when enabled.

---
 dlls/winex11.drv/event.c       | 7 ++++++-
 dlls/winex11.drv/x11drv.h      | 1 +
 dlls/winex11.drv/x11drv_main.c | 5 +++++
 3 files changed, 12 insertions(+), 1 deletion(-)

diff --git a/dlls/winex11.drv/event.c b/dlls/winex11.drv/event.c
index 89a9974529b..baec41d0296 100644
--- a/dlls/winex11.drv/event.c
+++ b/dlls/winex11.drv/event.c
@@ -433,13 +433,18 @@ static BOOL process_events( Display *display, Bool (*filter)(Display*, XEvent*,X
 {
     XEvent event, prev_event;
     int count = 0;
-    BOOL queued = FALSE;
+    BOOL queued = FALSE, overlay_enabled = FALSE;
     enum event_merge_action action = MERGE_DISCARD;
+    ULONG_PTR overlay_filter = QS_KEY | QS_MOUSEBUTTON | QS_MOUSEMOVE;
+
+    if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0)
+        overlay_enabled = TRUE;

     prev_event.type = 0;
     while (XCheckIfEvent( display, &event, filter, (char *)arg ))
     {
         count++;
+        if (overlay_enabled && filter_event( display, &event, (char *)overlay_filter )) continue;
         if (XFilterEvent( &event, None ))
         {
             /*
diff --git a/dlls/winex11.drv/x11drv.h b/dlls/winex11.drv/x11drv.h
index 147087e3220..e4164eba5d2 100644
--- a/dlls/winex11.drv/x11drv.h
+++ b/dlls/winex11.drv/x11drv.h
@@ -412,6 +412,7 @@ extern int xrender_error_base DECLSPEC_HIDDEN;
 extern HMODULE x11drv_module DECLSPEC_HIDDEN;
 extern char *process_name DECLSPEC_HIDDEN;
 extern Display *clipboard_display DECLSPEC_HIDDEN;
+extern HANDLE steam_overlay_event DECLSPEC_HIDDEN;

 /* atoms */

diff --git a/dlls/winex11.drv/x11drv_main.c b/dlls/winex11.drv/x11drv_main.c
index f23ce260a7f..17d80458c54 100644
--- a/dlls/winex11.drv/x11drv_main.c
+++ b/dlls/winex11.drv/x11drv_main.c
@@ -90,6 +90,7 @@ DWORD thread_data_tls_index = TLS_OUT_OF_INDEXES;
 int xrender_error_base = 0;
 HMODULE x11drv_module = 0;
 char *process_name = NULL;
+HANDLE steam_overlay_event;

 static x11drv_error_callback err_callback;   /* current callback for error */
 static Display *err_callback_display;        /* display callback is set for */
@@ -738,6 +739,10 @@ BOOL WINAPI DllMain( HINSTANCE hinst, DWORD reason, LPVOID reserved )
         DisableThreadLibraryCalls( hinst );
         x11drv_module = hinst;
         ret = process_attach();
+        steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
+        break;
+    case DLL_PROCESS_DETACH:
+        CloseHandle(steam_overlay_event);
         break;
     }
     return ret;
From e13770344bef95b734a1000a0c70bc4d5fce540f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 17 Dec 2020 19:05:37 +0100
Subject: [PATCH] HACK: steam: winebus.sys: Check Steam overlay presence and
 drop reports when enabled.

---
 dlls/winebus.sys/bus_sdl.c  | 12 ++++++++++++
 dlls/winebus.sys/bus_udev.c | 12 ++++++++++++
 2 files changed, 24 insertions(+)

diff --git a/dlls/winebus.sys/bus_sdl.c b/dlls/winebus.sys/bus_sdl.c
index cc490c0ea77..a26da1340e2 100644
--- a/dlls/winebus.sys/bus_sdl.c
+++ b/dlls/winebus.sys/bus_sdl.c
@@ -70,6 +70,7 @@ static DWORD map_controllers = 0;
 static void *sdl_handle = NULL;
 static HANDLE deviceloop_handle;
 static UINT quit_event = -1;
+static HANDLE steam_overlay_event;
 
 #define XINPUT_HACK_ID_BIT 0x80000000
 
@@ -1166,8 +1167,13 @@ static void try_add_device(unsigned int index, BOOL xinput_hack)
 
 static void process_device_event(SDL_Event *event)
 {
+    BOOL overlay_enabled = FALSE;
+
     TRACE_(hid_report)("Received action %x\n", event->type);
 
+    if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0)
+        overlay_enabled = TRUE;
+
     if (event->type == SDL_JOYDEVICEADDED)
     {
         try_add_device(((SDL_JoyDeviceEvent*)event)->which, TRUE);
@@ -1182,6 +1188,8 @@ static void process_device_event(SDL_Event *event)
     {
         SDL_Event xinput_hack_event = *event;
 
+        if (overlay_enabled) return;
+
         set_report_from_event(event);
 
         ((SDL_JoyAxisEvent*)&xinput_hack_event)->which |= XINPUT_HACK_ID_BIT;
@@ -1191,6 +1199,8 @@ static void process_device_event(SDL_Event *event)
     {
         SDL_Event xinput_hack_event = *event;
 
+        if (overlay_enabled) return;
+
         set_mapped_report_from_event(event);
 
         ((SDL_JoyAxisEvent*)&xinput_hack_event)->which |= XINPUT_HACK_ID_BIT;
@@ -1299,6 +1309,7 @@ void sdl_driver_unload( void )
     WaitForSingleObject(deviceloop_handle, INFINITE);
     CloseHandle(deviceloop_handle);
     dlclose(sdl_handle);
+    CloseHandle(steam_overlay_event);
 }
 
 NTSTATUS sdl_driver_init(void)
@@ -1308,6 +1319,7 @@ NTSTATUS sdl_driver_init(void)
 
     HANDLE events[2];
     DWORD result;
+    steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
 
     if (sdl_handle == NULL)
     {
diff --git a/dlls/winebus.sys/bus_udev.c b/dlls/winebus.sys/bus_udev.c
index cc332c6f042..7af9128110a 100644
--- a/dlls/winebus.sys/bus_udev.c
+++ b/dlls/winebus.sys/bus_udev.c
@@ -102,6 +102,7 @@ static DWORD disable_hidraw = 0;
 static DWORD disable_input = 0;
 static HANDLE deviceloop_handle;
 static int deviceloop_control[2];
+static HANDLE steam_overlay_event;
 
 static const WCHAR hidraw_busidW[] = {'H','I','D','R','A','W',0};
 static const WCHAR lnxev_busidW[] = {'L','N','X','E','V',0};
@@ -1214,15 +1215,22 @@ static DWORD CALLBACK device_report_thread(void *args)
     {
         int size;
         BYTE report_buffer[1024];
+        BOOL overlay_enabled = FALSE;
 
         if (poll(plfds, 2, -1) <= 0) continue;
         if (plfds[1].revents)
             break;
+
+        if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0)
+            overlay_enabled = TRUE;
+
         size = read(plfds[0].fd, report_buffer, sizeof(report_buffer));
         if (size == -1)
             TRACE_(hid_report)("Read failed. Likely an unplugged device %d %s\n", errno, strerror(errno));
         else if (size == 0)
             TRACE_(hid_report)("Failed to read report\n");
+        else if (overlay_enabled)
+            TRACE_(hid_report)("Overlay is enabled, dropping report\n");
         else
         {
             if(private->quirks & QUIRK_DS4_BT)
@@ -2341,6 +2349,8 @@ void udev_driver_unload( void )
 #ifdef HAS_PROPER_INPUT_HEADER
     bus_enumerate_hid_devices(&lnxev_vtbl, device_unload, NULL);
 #endif
+
+    CloseHandle(steam_overlay_event);
 }
 
 NTSTATUS udev_driver_init(void)
@@ -2354,6 +2364,8 @@ NTSTATUS udev_driver_init(void)
     static const WCHAR input_disabledW[] = {'D','i','s','a','b','l','e','I','n','p','u','t',0};
     static const UNICODE_STRING input_disabled = {sizeof(input_disabledW) - sizeof(WCHAR), sizeof(input_disabledW), (WCHAR*)input_disabledW};
 
+    steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
+
     if (pipe(deviceloop_control) != 0)
     {
         ERR("Control pipe creation failed\n");
From 4b54b614e48d9463e71acf2da899ddd05978a29f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Sat, 9 Jan 2021 20:11:52 +0100
Subject: [PATCH] HACK: steam: dinput: Check Steam overlay presence and ignore
 updates when enabled.

---
 dlls/dinput/joystick_sdl.c | 6 ++++++
 1 file changed, 6 insertions(+)

diff --git a/dlls/dinput/joystick_sdl.c b/dlls/dinput/joystick_sdl.c
index e6266084906..a1ca99ee310 100644
--- a/dlls/dinput/joystick_sdl.c
+++ b/dlls/dinput/joystick_sdl.c
@@ -160,6 +160,7 @@ static CRITICAL_SECTION_DEBUG sdldevs_lock_debug =
 static CRITICAL_SECTION sdldevs_lock = { &sdldevs_lock_debug, -1, 0, 0, 0, 0 };
 
 static struct SDLDev sdldevs[64];
+static HANDLE steam_overlay_event;
 
 /* logic from SDL2's SDL_ShouldIgnoreGameController */
 static BOOL is_in_sdl_blacklist(DWORD vid, DWORD pid)
@@ -224,6 +225,8 @@ static BOOL WINAPI sdldrv_init(INIT_ONCE *once, void *param, void **context)
     SDL_Init(SDL_INIT_JOYSTICK|SDL_INIT_HAPTIC);
     SDL_JoystickEventState(SDL_ENABLE);
 
+    steam_overlay_event = CreateEventA(NULL, TRUE, FALSE, "__wine_steamclient_GameOverlayActivated");
+
     return TRUE;
 }
 
@@ -890,6 +893,9 @@ static HRESULT poll_sdl_device_state(LPDIRECTINPUTDEVICE8A iface)
     struct device_state_item item;
     SDL_Joystick *js = This->sdldev->sdl_js;
 
+    if (WaitForSingleObject(steam_overlay_event, 0) == WAIT_OBJECT_0)
+        return DI_OK; /* steam overlay is enabled */
+
     SDL_JoystickUpdate();
 
     if(!SDL_JoystickGetAttached(js))
From 2117f849363107537dfc954451ed96237b5b3f9d Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Thu, 14 Jan 2021 16:30:58 +0100
Subject: [PATCH] HACK: steam: winebus.sys: Pass SDL button up events through
 the overlay.

So that game internal state doesn't keep the button as pressed. Some
game request the Steam overlay to open whenever a button is pressed,
and keep requesting it until its state changes, which never happened
as we were dropping all the events.
---
 dlls/winebus.sys/bus_sdl.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/winebus.sys/bus_sdl.c b/dlls/winebus.sys/bus_sdl.c
index a26da1340e2..a80de1d6a08 100644
--- a/dlls/winebus.sys/bus_sdl.c
+++ b/dlls/winebus.sys/bus_sdl.c
@@ -1188,7 +1188,7 @@ static void process_device_event(SDL_Event *event)
     {
         SDL_Event xinput_hack_event = *event;
 
-        if (overlay_enabled) return;
+        if (overlay_enabled && event->type != SDL_JOYBUTTONUP) return;
 
         set_report_from_event(event);
 
@@ -1199,7 +1199,7 @@ static void process_device_event(SDL_Event *event)
     {
         SDL_Event xinput_hack_event = *event;
 
-        if (overlay_enabled) return;
+        if (overlay_enabled && event->type != SDL_CONTROLLERBUTTONUP) return;
 
         set_mapped_report_from_event(event);
 
From 04ddf23b989096e232386f79e0b0031b6d37b72f Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?R=C3=A9mi=20Bernon?= <rbernon@codeweavers.com>
Date: Wed, 18 Dec 2019 13:49:00 +0100
Subject: [PATCH] HACK: user32: Strip gameoverlayrenderer.so from LD_PRELOAD
 before executing explorer.exe.

Work around a bug in gameoverlayrenderer which introduces 50ms hangs
during XCheckIfEvent after approx 40 minutes of gameplay.
---
 dlls/user32/win.c | 55 +++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 55 insertions(+)

diff --git a/dlls/user32/win.c b/dlls/user32/win.c
index 610dc7857b4..cb5b0465f68 100644
--- a/dlls/user32/win.c
+++ b/dlls/user32/win.c
@@ -45,6 +45,15 @@ static DWORD process_layout = ~0u;

 static struct list window_surfaces = LIST_INIT( window_surfaces );

+static CRITICAL_SECTION desktop_section;
+static CRITICAL_SECTION_DEBUG desktop_critsect_debug =
+{
+    0, 0, &desktop_section,
+    { &desktop_critsect_debug.ProcessLocksList, &desktop_critsect_debug.ProcessLocksList },
+      0, 0, { (DWORD_PTR)(__FILE__ ": desktop_section") }
+};
+static CRITICAL_SECTION desktop_section = { &desktop_critsect_debug, -1, 0, 0, 0, 0 };
+
 static CRITICAL_SECTION surfaces_section;
 static CRITICAL_SECTION_DEBUG critsect_debug =
 {
@@ -2098,6 +2107,7 @@ HWND WINAPI GetDesktopWindow(void)
         WCHAR app[MAX_PATH + ARRAY_SIZE( L"\\explorer.exe" )];
         WCHAR cmdline[MAX_PATH + ARRAY_SIZE( L"\\explorer.exe /desktop" )];
         WCHAR desktop[MAX_PATH];
+        char *ld_preload;
         void *redir;

         SERVER_START_REQ( set_user_object_info )
@@ -2130,6 +2140,46 @@ HWND WINAPI GetDesktopWindow(void)
         lstrcpyW( cmdline, app );
         lstrcatW( cmdline, L" /desktop" );

+        EnterCriticalSection( &desktop_section);
+
+        /* HACK: Unset LD_PRELOAD before executing explorer.exe to disable buggy gameoverlayrenderer.so
+         * It's not going to work through the CreateProcessW env parameter, as it will not be used for the loader execv.
+         */
+        if ((ld_preload = getenv("LD_PRELOAD")))
+        {
+            static char const gorso[] = "gameoverlayrenderer.so";
+            static unsigned int gorso_len = ARRAY_SIZE(gorso) - 1;
+            char *env, *next, *tmp;
+
+            env = HeapAlloc(GetProcessHeap(), 0, strlen(ld_preload) + 1);
+            strcpy(env, ld_preload);
+
+            tmp = env;
+            do
+            {
+                if (!(next = strchr(tmp, ':')))
+                    next = tmp + strlen(tmp);
+
+                if (next - tmp >= gorso_len &&
+                    strncmp(next - gorso_len, gorso, gorso_len) == 0)
+                {
+                    if (*next)
+                        memmove(tmp, next + 1, strlen(next));
+                    else
+                        *tmp = 0;
+                    next = tmp;
+                }
+                else
+                {
+                    tmp = next + 1;
+                }
+            }
+            while (*next);
+
+            SetEnvironmentVariableA("LD_PRELOAD", env);
+            HeapFree(GetProcessHeap(), 0, env);
+        }
+
         Wow64DisableWow64FsRedirection( &redir );
         if (CreateProcessW( app, cmdline, NULL, NULL, FALSE, DETACHED_PROCESS,
                             NULL, windir, &si, &pi ))
@@ -2142,6 +2192,11 @@ HWND WINAPI GetDesktopWindow(void)
         else WARN( "failed to start explorer, err %d\n", GetLastError() );
         Wow64RevertWow64FsRedirection( redir );

+        /* HACK: Restore the previous value, just in case */
+        if (ld_preload) SetEnvironmentVariableA("LD_PRELOAD", ld_preload);
+
+        LeaveCriticalSection( &desktop_section );
+
         SERVER_START_REQ( get_desktop_window )
         {
             req->force = 1;


From 12b4a3fb559cafd4b5fdb072dc4e2bb3aa1e95b1 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Mon, 5 Apr 2021 13:20:41 -0500
Subject: [PATCH] ntdll: Export a function to set a Unix environment variable

---
 dlls/ntdll/env.c               | 5 +++++
 dlls/ntdll/ntdll.spec          | 1 +
 dlls/ntdll/unix/env.c          | 5 +++++
 dlls/ntdll/unix/loader.c       | 1 +
 dlls/ntdll/unix/unix_private.h | 2 ++
 dlls/ntdll/unixlib.h           | 1 +
 include/wine/debug.h           | 1 +
 7 files changed, 16 insertions(+)

diff --git a/dlls/ntdll/env.c b/dlls/ntdll/env.c
index 4931e407e57..bc5ed6648aa 100644
--- a/dlls/ntdll/env.c
+++ b/dlls/ntdll/env.c
@@ -1072,3 +1072,8 @@ void init_user_process_params(void)
     set_wow64_environment( &params->Environment );
     params->EnvironmentSize = RtlSizeHeap( GetProcessHeap(), 0, params->Environment );
 }
+
+void __cdecl __wine_set_unix_env( const char *var, const char *val)
+{
+    unix_funcs->set_unix_env( var, val );
+}
diff --git a/dlls/ntdll/ntdll.spec b/dlls/ntdll/ntdll.spec
index 185dd6767eb..6c71032bd31 100644
--- a/dlls/ntdll/ntdll.spec
+++ b/dlls/ntdll/ntdll.spec
@@ -1610,6 +1610,7 @@
 @ cdecl __wine_init_unix_lib(long long ptr ptr)
 @ extern __wine_syscall_dispatcher
 @ extern -arch=i386 __wine_ldt_copy
+@ cdecl __wine_set_unix_env(ptr ptr)

 # Debugging
 @ cdecl -norelay __wine_dbg_get_channel_flags(ptr)
diff --git a/dlls/ntdll/unix/env.c b/dlls/ntdll/unix/env.c
index 9308c7ed76c..f92e6c33846 100644
--- a/dlls/ntdll/unix/env.c
+++ b/dlls/ntdll/unix/env.c
@@ -1735,3 +1735,8 @@ NTSTATUS WINAPI NtQueryInstallUILanguage( LANGID *lang )
     *lang = system_ui_language;
     return STATUS_SUCCESS;
 }
+
+void CDECL set_unix_env( const char *var, const char *val )
+{
+    setenv(var, val, 1);
+}
diff --git a/dlls/ntdll/unix/loader.c b/dlls/ntdll/unix/loader.c
index e565c324eef..7cdd8b89dfd 100644
--- a/dlls/ntdll/unix/loader.c
+++ b/dlls/ntdll/unix/loader.c
@@ -1818,6 +1818,7 @@ static struct unix_funcs unix_funcs =
     __wine_dbg_output,
     __wine_dbg_header,
     steamclient_setup_trampolines,
+    set_unix_env,
 };


diff --git a/dlls/ntdll/unix/unix_private.h b/dlls/ntdll/unix/unix_private.h
index f4bd0b7876e..ab37830cb3c 100644
--- a/dlls/ntdll/unix/unix_private.h
+++ b/dlls/ntdll/unix/unix_private.h
@@ -258,6 +258,8 @@ extern void WINAPI call_raise_user_exception_dispatcher( NTSTATUS (WINAPI *dispa
 extern void *get_syscall_frame(void) DECLSPEC_HIDDEN;
 extern void set_syscall_frame(void *frame) DECLSPEC_HIDDEN;

+extern void CDECL set_unix_env(const char *var, const char *val) DECLSPEC_HIDDEN;
+
 #define TICKSPERSEC 10000000
 #define SECS_1601_TO_1970  ((369 * 365 + 89) * (ULONGLONG)86400)

diff --git a/dlls/ntdll/unixlib.h b/dlls/ntdll/unixlib.h
index 0f136508b54..b252ed9ae7e 100644
--- a/dlls/ntdll/unixlib.h
+++ b/dlls/ntdll/unixlib.h
@@ -94,6 +94,7 @@ struct unix_funcs

     /* steamclient HACK */
     void          (CDECL *steamclient_setup_trampolines)( HMODULE src_mod, HMODULE tgt_mod );
+    void          (CDECL *set_unix_env)( const char *var, const char *val );
 };

 #endif /* __NTDLL_UNIXLIB_H */
diff --git a/include/wine/debug.h b/include/wine/debug.h
index 2255f62e502..60bd9630202 100644
--- a/include/wine/debug.h
+++ b/include/wine/debug.h
@@ -148,6 +148,7 @@ extern const char * __cdecl __wine_dbg_strdup( const char *str );
 extern int __cdecl __wine_dbg_output( const char *str );
 extern int __cdecl __wine_dbg_header( enum __wine_debug_class cls, struct __wine_debug_channel *channel,
                                       const char *function );
+extern void __cdecl __wine_set_unix_env( const char *var, const char *val );

 /*
  * Exported definitions and macros
From 97f962cd469ee9b9b68d32e79849bf94cfe15581 Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Mon, 5 Apr 2021 13:21:54 -0500
Subject: [PATCH] fixup, user32: Use new export to set LD_PRELOAD

Fixup for "HACK: user32: Strip gameoverlayrenderer.so from LD_PRELOAD
before executing explorer.exe."
---
 dlls/user32/win.c | 4 ++--
 1 file changed, 2 insertions(+), 2 deletions(-)

diff --git a/dlls/user32/win.c b/dlls/user32/win.c
index cb5b0465f68..847c689c1e0 100644
--- a/dlls/user32/win.c
+++ b/dlls/user32/win.c
@@ -2176,7 +2176,7 @@ HWND WINAPI GetDesktopWindow(void)
             }
             while (*next);

-            SetEnvironmentVariableA("LD_PRELOAD", env);
+            __wine_set_unix_env("LD_PRELOAD", env);
             HeapFree(GetProcessHeap(), 0, env);
         }

@@ -2193,7 +2193,7 @@ HWND WINAPI GetDesktopWindow(void)
         Wow64RevertWow64FsRedirection( redir );

         /* HACK: Restore the previous value, just in case */
-        if (ld_preload) SetEnvironmentVariableA("LD_PRELOAD", ld_preload);
+        if (ld_preload) __wine_set_unix_env("LD_PRELOAD", ld_preload);

         LeaveCriticalSection( &desktop_section );
