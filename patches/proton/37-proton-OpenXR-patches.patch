From 700ee48e028333b7afbcf3ac0c2e2b3c6ccbfedf Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Wed, 30 Dec 2020 13:22:43 -0600
Subject: [PATCH] winevulkan: Retrieve XR extensions from the environment

---
 dlls/winevulkan/vulkan.c | 136 +++++++++++++++++++++++++++++++++++++--
 1 file changed, 132 insertions(+), 4 deletions(-)

diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index a0009ae85f5..c10a53e4acf 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -382,13 +382,83 @@ static void wine_vk_device_free_create_info(VkDeviceCreateInfo *create_info)
     free_VkDeviceCreateInfo_struct_chain(create_info);
 }
 
+static char *strdupA(const char *s)
+{
+    size_t l = strlen(s) + 1;
+    char *r = heap_alloc(l);
+    memcpy(r, s, l);
+    return r;
+}
+
+static char **parse_xr_extensions(unsigned int *len)
+{
+    DWORD ev_len;
+    char *xr_str, *iter, *start, **list;
+    unsigned int extension_count = 0, o = 0;
+
+    static const char *xr_extensions_var = "__WINE_OPENXR_VK_DEVICE_EXTENSIONS";
+
+    ev_len = GetEnvironmentVariableA(xr_extensions_var, NULL, 0);
+    if(!ev_len){
+        *len = 0;
+        return NULL;
+    }
+
+    xr_str = heap_alloc(ev_len);
+    GetEnvironmentVariableA(xr_extensions_var, xr_str, ev_len);
+
+    TRACE("got var: %s\n", xr_str);
+
+    iter = xr_str;
+    while(*iter){
+        if(*iter++ == ' ')
+            extension_count++;
+    }
+    /* count the one ending in NUL */
+    if(iter != xr_str)
+        extension_count++;
+    if(!extension_count){
+        *len = 0;
+        return NULL;
+    }
+
+    TRACE("counted %u extensions\n", extension_count);
+
+    list = heap_alloc(extension_count * sizeof(char *));
+
+    start = iter = xr_str;
+    do{
+        if(*iter == ' '){
+            *iter = 0;
+            list[o++] = strdupA(start);
+            TRACE("added %s to list\n", list[o-1]);
+            iter++;
+            start = iter;
+        }else if(*iter == 0){
+            list[o++] = strdupA(start);
+            TRACE("added %s to list\n", list[o-1]);
+            break;
+        }else{
+            iter++;
+        }
+    }while(1);
+
+    heap_free(xr_str);
+
+    *len = extension_count;
+
+    return list;
+}
+
 static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src,
-        VkDeviceCreateInfo *dst)
+        VkDeviceCreateInfo *dst, BOOL *must_free_extensions)
 {
     VkDeviceGroupDeviceCreateInfo *group_info;
-    unsigned int i;
+    unsigned int i, append_xr = 0, wine_extension_count;
     VkResult res;
 
+    static const char *wine_xr_extension_name = "VK_WINE_openxr_device_extensions";
+
     *dst = *src;
 
     if ((res = convert_VkDeviceCreateInfo_struct_chain(src->pNext, dst)) < 0)
@@ -451,8 +521,55 @@ static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src
     dst->enabledLayerCount = 0;
     dst->ppEnabledLayerNames = NULL;
 
-    TRACE("Enabled %u extensions.\n", dst->enabledExtensionCount);
+
     for (i = 0; i < dst->enabledExtensionCount; i++)
+    {
+        const char *extension_name = dst->ppEnabledExtensionNames[i];
+        if (!strcmp(extension_name, wine_xr_extension_name))
+        {
+            append_xr = 1;
+            break;
+        }
+    }
+
+    if (append_xr)
+    {
+        unsigned int xr_extensions_len, o = 0;
+        char **xr_extensions_list = parse_xr_extensions(&xr_extensions_len);
+
+        char **new_extensions_list = heap_alloc(sizeof(char *) * (dst->enabledExtensionCount + xr_extensions_len));
+
+        if(!xr_extensions_list)
+            WARN("Requested to use XR extensions, but none are set!\n");
+
+        for (i = 0; i < dst->enabledExtensionCount; i++)
+        {
+            if (strcmp(dst->ppEnabledExtensionNames[i], wine_xr_extension_name) != 0)
+            {
+                new_extensions_list[o++] = strdupA(dst->ppEnabledExtensionNames[i]);
+            }
+        }
+
+        TRACE("appending XR extensions:\n");
+        for (i = 0; i < xr_extensions_len; ++i)
+        {
+            TRACE("\t%s\n", xr_extensions_list[i]);
+            new_extensions_list[o++] = xr_extensions_list[i];
+        }
+        dst->enabledExtensionCount = o;
+        dst->ppEnabledExtensionNames = (const char * const *)new_extensions_list;
+
+        heap_free(xr_extensions_list);
+
+        *must_free_extensions = TRUE;
+        wine_extension_count = dst->enabledExtensionCount - xr_extensions_len;
+    } else {
+        *must_free_extensions = FALSE;
+        wine_extension_count = dst->enabledExtensionCount;
+    }
+
+    TRACE("Enabled %u extensions.\n", dst->enabledExtensionCount);
+    for (i = 0; i < wine_extension_count; i++)
     {
         const char *extension_name = dst->ppEnabledExtensionNames[i];
         TRACE("Extension %u: %s.\n", i, debugstr_a(extension_name));
@@ -435,6 +584,14 @@ static VkResult wine_vk_device_convert_create_info(const VkDeviceCreateInfo *src
     return VK_SUCCESS;
 }
 
+static void wine_vk_device_free_create_info_extensions(VkDeviceCreateInfo *create_info)
+{
+    unsigned int i;
+    for(i = 0; i < create_info->enabledExtensionCount; ++i)
+        heap_free((void*)create_info->ppEnabledExtensionNames[i]);
+    heap_free((void*)create_info->ppEnabledExtensionNames);
+}
+
 /* Helper function used for freeing a device structure. This function supports full
  * and partial object cleanups and can thus be used for vkCreateDevice failures.
  */
@@ -918,6 +918,7 @@ VkResult WINAPI wine_vkCreateDevice(VkPhysicalDevice phys_dev,
     uint32_t max_queue_families;
     struct VkDevice_T *object;
     unsigned int i;
+    BOOL create_info_free_extensions;
     VkResult res;
 
     TRACE("%p, %p, %p, %p\n", phys_dev, create_info, allocator, device);
@@ -942,13 +943,15 @@ VkResult WINAPI wine_vkCreateDevice(VkPhysicalDevice phys_dev,
     object->base.loader_magic = VULKAN_ICD_MAGIC_VALUE;
     object->phys_dev = phys_dev;
 
-    res = wine_vk_device_convert_create_info(create_info, &create_info_host);
+    res = wine_vk_device_convert_create_info(create_info, &create_info_host, &create_info_free_extensions);
     if (res != VK_SUCCESS)
         goto fail;
 
     res = phys_dev->instance->funcs.p_vkCreateDevice(phys_dev->phys_dev,
             &create_info_host, NULL /* allocator */, &object->device);
     wine_vk_device_free_create_info(&create_info_host);
+    if(create_info_free_extensions)
+        wine_vk_device_free_create_info_extensions(&create_info_host);
     WINE_VK_ADD_DISPATCHABLE_MAPPING(phys_dev->instance, object, object->device);
     if (res != VK_SUCCESS)
     {
From ee64c2b291290753eefdca064b89ad86e2e6fcbe Mon Sep 17 00:00:00 2001
From: Andrew Eikum <aeikum@codeweavers.com>
Date: Mon, 4 Jan 2021 14:25:06 -0600
Subject: [PATCH] wine.inf: Add OpenXR registry entries

---
 loader/wine.inf.in | 1 +
 1 file changed, 1 insertion(+)

diff --git a/loader/wine.inf.in b/loader/wine.inf.in
index 009dd58600d..928c6883372 100644
--- a/loader/wine.inf.in
+++ b/loader/wine.inf.in
@@ -4017,6 +4017,7 @@ HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll",,"%16426%\Steam\steamcl
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamClientDll64",,"%16426%\Steam\steamclient64.dll"
 HKCU,Software\Valve\Steam\ActiveProcess,"SteamPath",,"%16426%\Steam"
 HKLM,Software\Wow6432Node\Valve\Steam,"InstallPath",,"%16422%\Steam"
+HKLM,Software\Khronos\OpenXR\1,"ActiveRuntime",,"C:\openxr\wineopenxr64.json"
 HKCU,Software\Wine\AppDefaults\NewColossus_x64vk.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 HKCU,Software\Wine\AppDefaults\RDR2.exe\DllOverrides,"amd_ags_x64",0x2,"builtin,native"
 HKCU,Software\Wine\AppDefaults\DarkSoulsIII.exe\X11 Driver,"LimitNumberOfResolutions",0x2,"32"
From e319e326a26b069fe946d9b5c54efb241cd675e8 Mon Sep 17 00:00:00 2001
From: Paul Gofman <pgofman@codeweavers.com>
Date: Fri, 26 Feb 2021 20:22:34 +0300
Subject: [PATCH] winevulkan: Add functions for creating VK instance and device
 through OpenXR.

---
 dlls/winevulkan/make_vulkan     |  6 +++++
 dlls/winevulkan/vulkan.c        | 47 +++++++++++++++++++++++++++------
 dlls/winevulkan/winevulkan.spec |  2 ++
 dlls/winex11.drv/vulkan.c       | 22 ++++++++++++---
 include/wine/vulkan_driver.h    |  4 +++
 5 files changed, 69 insertions(+), 12 deletions(-)

diff --git a/dlls/winevulkan/make_vulkan b/dlls/winevulkan/make_vulkan
index 8c2c8892e7f..925c2288b9e 100755
--- a/dlls/winevulkan/make_vulkan
+++ b/dlls/winevulkan/make_vulkan
@@ -2650,6 +2650,10 @@ class VkGenerator(object):
         f.write("\n")
         f.write("    /* winevulkan specific functions */\n")
         f.write("    VkSurfaceKHR (*p_wine_get_native_surface)(VkSurfaceKHR);\n")
+        f.write("    VkResult (*create_vk_instance_with_callback)(const VkInstanceCreateInfo *create_info,\n")
+        f.write("            const VkAllocationCallbacks *allocator, VkInstance *instance,\n")
+        f.write("            VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,\n")
+        f.write("            VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context);\n")
         f.write("};\n\n")
 
         f.write("extern const struct vulkan_funcs * CDECL __wine_get_vulkan_driver(HDC hdc, UINT version);\n\n")
@@ -2690,6 +2694,8 @@ class VkGenerator(object):
         f.write("@ stdcall -private vk_icdGetInstanceProcAddr(ptr str) wine_vk_icdGetInstanceProcAddr\n")
         f.write("@ stdcall -private vk_icdNegotiateLoaderICDInterfaceVersion(ptr) wine_vk_icdNegotiateLoaderICDInterfaceVersion\n")
         f.write("@ cdecl -norelay native_vkGetInstanceProcAddrWINE(ptr str)\n")
+        f.write("@ stdcall __wine_create_vk_instance_with_callback(ptr ptr ptr ptr ptr)\n")
+        f.write("@ stdcall __wine_create_vk_device_with_callback(ptr ptr ptr ptr ptr ptr)\n")
 
         # Export symbols for all Vulkan Core functions.
         for func in self.registry.funcs.values():
diff --git a/dlls/winevulkan/vulkan.c b/dlls/winevulkan/vulkan.c
index c0554504ee9..fad6310d672 100644
--- a/dlls/winevulkan/vulkan.c
+++ b/dlls/winevulkan/vulkan.c
@@ -877,9 +877,11 @@ void WINAPI wine_vkCmdExecuteCommands(VkCommandBuffer buffer, uint32_t count,
     heap_free(tmp_buffers);
 }
 
-VkResult WINAPI wine_vkCreateDevice(VkPhysicalDevice phys_dev,
+VkResult WINAPI __wine_create_vk_device_with_callback(VkPhysicalDevice phys_dev,
         const VkDeviceCreateInfo *create_info,
-        const VkAllocationCallbacks *allocator, VkDevice *device)
+        const VkAllocationCallbacks *allocator, VkDevice *device,
+        VkResult (WINAPI *native_vkCreateDevice)(VkPhysicalDevice, const VkDeviceCreateInfo *, const VkAllocationCallbacks *,
+        VkDevice *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateDevice_context)
 {
     VkDeviceCreateInfo create_info_host;
     uint32_t max_queue_families;
@@ -914,8 +916,14 @@ VkResult WINAPI wine_vkCreateDevice(VkPhysicalDevice phys_dev,
     if (res != VK_SUCCESS)
         goto fail;
 
-    res = phys_dev->instance->funcs.p_vkCreateDevice(phys_dev->phys_dev,
-            &create_info_host, NULL /* allocator */, &object->device);
+    if (native_vkCreateDevice)
+        res = native_vkCreateDevice(phys_dev->phys_dev,
+                &create_info_host, NULL /* allocator */, &object->device,
+                vk_funcs->p_vkGetInstanceProcAddr, native_vkCreateDevice_context);
+    else
+        res = phys_dev->instance->funcs.p_vkCreateDevice(phys_dev->phys_dev,
+                &create_info_host, NULL /* allocator */, &object->device);
+
     wine_vk_device_free_create_info(&create_info_host);
     if(create_info_free_extensions)
         wine_vk_device_free_create_info_extensions(&create_info_host);
@@ -1027,8 +1027,17 @@ fail:
     return res;
 }
 
-VkResult WINAPI wine_vkCreateInstance(const VkInstanceCreateInfo *create_info,
-        const VkAllocationCallbacks *allocator, VkInstance *instance)
+VkResult WINAPI wine_vkCreateDevice(VkPhysicalDevice phys_dev,
+        const VkDeviceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkDevice *device)
+{
+    return __wine_create_vk_device_with_callback(phys_dev, create_info, allocator, device, NULL, NULL);
+}
+
+VkResult WINAPI __wine_create_vk_instance_with_callback(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance,
+        VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,
+        VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context)
 {
     VkInstanceCreateInfo create_info_host;
     const VkApplicationInfo *app_info;
@@ -1036,7 +1045,8 @@ VkResult WINAPI wine_vkCreateInstance(const VkInstanceCreateInfo *create_info,
     struct VkInstance_T *object;
     VkResult res;
 
-    TRACE("create_info %p, allocator %p, instance %p\n", create_info, allocator, instance);
+    TRACE("create_info %p, allocator %p, instance %p, native_vkCreateInstance %p, context %p.\n",
+            create_info, allocator, instance, native_vkCreateInstance, native_vkCreateInstance_context);
 
     wine_vk_init_once();
     if (!vk_funcs)
@@ -1011,7 +1029,14 @@ VkResult WINAPI wine_vkCreateInstance(const VkInstanceCreateInfo *create_info,
         return res;
     }
 
-    res = vk_funcs->p_vkCreateInstance(&create_info_host, NULL /* allocator */, &object->instance);
+    if (native_vkCreateInstance && !vk_funcs->create_vk_instance_with_callback)
+        ERR("Driver create_vk_instance_with_callback is not available.\n");
+
+    if (native_vkCreateInstance && vk_funcs->create_vk_instance_with_callback)
+        res = vk_funcs->create_vk_instance_with_callback(&create_info_host, NULL /* allocator */, &object->instance,
+                native_vkCreateInstance, native_vkCreateInstance_context);
+    else
+        res = vk_funcs->p_vkCreateInstance(&create_info_host, NULL /* allocator */, &object->instance);
     free_VkInstanceCreateInfo_struct_chain(&create_info_host);
     if (res != VK_SUCCESS)
     {
@@ -1063,6 +1088,12 @@ VkResult WINAPI wine_vkCreateInstance(const VkInstanceCreateInfo *create_info,
     return VK_SUCCESS;
 }
 
+VkResult WINAPI wine_vkCreateInstance(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance)
+{
+    return __wine_create_vk_instance_with_callback(create_info, allocator, instance, NULL, NULL);
+}
+
 void WINAPI wine_vkDestroyDevice(VkDevice device, const VkAllocationCallbacks *allocator)
 {
     TRACE("%p %p\n", device, allocator);
diff --git a/dlls/winevulkan/winevulkan.spec b/dlls/winevulkan/winevulkan.spec
index 0bd1eaefc78..8499df71e85 100644
--- a/dlls/winevulkan/winevulkan.spec
+++ b/dlls/winevulkan/winevulkan.spec
@@ -11,6 +11,8 @@
 @ stdcall -private vk_icdGetInstanceProcAddr(ptr str) wine_vk_icdGetInstanceProcAddr
 @ stdcall -private vk_icdNegotiateLoaderICDInterfaceVersion(ptr) wine_vk_icdNegotiateLoaderICDInterfaceVersion
 @ cdecl -norelay native_vkGetInstanceProcAddrWINE(ptr str)
+@ stdcall __wine_create_vk_instance_with_callback(ptr ptr ptr ptr ptr)
+@ stdcall __wine_create_vk_device_with_callback(ptr ptr ptr ptr ptr ptr)
 @ stdcall -private wine_vkAcquireNextImage2KHR(ptr ptr ptr)
 @ stdcall -private wine_vkAcquireNextImageKHR(ptr int64 int64 int64 int64 ptr)
 @ stdcall -private wine_vkAllocateCommandBuffers(ptr ptr ptr)
diff --git a/dlls/winex11.drv/vulkan.c b/dlls/winex11.drv/vulkan.c
index 70a3e4d2819..219dad99595 100644
--- a/dlls/winex11.drv/vulkan.c
+++ b/dlls/winex11.drv/vulkan.c
@@ -224,12 +224,15 @@ void wine_vk_surface_destroy(HWND hwnd)
     LeaveCriticalSection(&context_section);
 }
 
-static VkResult X11DRV_vkCreateInstance(const VkInstanceCreateInfo *create_info,
-        const VkAllocationCallbacks *allocator, VkInstance *instance)
+static VkResult X11DRV_create_vk_instance_with_callback(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance,
+        VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,
+        VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context)
 {
     VkInstanceCreateInfo create_info_host;
     VkResult res;
-    TRACE("create_info %p, allocator %p, instance %p\n", create_info, allocator, instance);
+    TRACE("create_info %p, allocator %p, instance %p, native_vkCreateInstance %p, context %p.\n",
+            create_info, allocator, instance, native_vkCreateInstance, native_vkCreateInstance_context);
 
     if (allocator)
         FIXME("Support for allocation callbacks not implemented yet\n");
@@ -245,12 +248,22 @@ static VkResult X11DRV_vkCreateInstance(const VkInstanceCreateInfo *create_info,
         return res;
     }
 
-    res = pvkCreateInstance(&create_info_host, NULL /* allocator */, instance);
+    if (native_vkCreateInstance)
+        res = native_vkCreateInstance(&create_info_host, NULL /* allocator */, instance,
+                pvkGetInstanceProcAddr, native_vkCreateInstance_context);
+    else
+        res = pvkCreateInstance(&create_info_host, NULL /* allocator */, instance);
 
     heap_free((void *)create_info_host.ppEnabledExtensionNames);
     return res;
 }
 
+static VkResult X11DRV_vkCreateInstance(const VkInstanceCreateInfo *create_info,
+        const VkAllocationCallbacks *allocator, VkInstance *instance)
+{
+    return X11DRV_create_vk_instance_with_callback(create_info, allocator, instance, NULL, NULL);
+}
+
 static VkResult X11DRV_vkCreateSwapchainKHR(VkDevice device,
         const VkSwapchainCreateInfoKHR *create_info,
         const VkAllocationCallbacks *allocator, VkSwapchainKHR *swapchain)
@@ -694,6 +707,7 @@ static const struct vulkan_funcs vulkan_funcs =
     X11DRV_vkQueuePresentKHR,
 
     X11DRV_wine_get_native_surface,
+    X11DRV_create_vk_instance_with_callback,
 };
 
 static void *X11DRV_get_vk_device_proc_addr(const char *name)
diff --git a/include/wine/vulkan_driver.h b/include/wine/vulkan_driver.h
index e8ff5051164..672565c43b4 100644
--- a/include/wine/vulkan_driver.h
+++ b/include/wine/vulkan_driver.h
@@ -50,6 +50,10 @@ struct vulkan_funcs
     VkResult (*p_vkQueuePresentKHR)(VkQueue, const VkPresentInfoKHR *);
 
     /* winevulkan specific functions */
     VkSurfaceKHR (*p_wine_get_native_surface)(VkSurfaceKHR);
+    VkResult (*create_vk_instance_with_callback)(const VkInstanceCreateInfo *create_info,
+            const VkAllocationCallbacks *allocator, VkInstance *instance,
+            VkResult (WINAPI *native_vkCreateInstance)(const VkInstanceCreateInfo *, const VkAllocationCallbacks *,
+            VkInstance *, void * (*)(VkInstance, const char *), void *), void *native_vkCreateInstance_context);
 };
 
 extern const struct vulkan_funcs * CDECL __wine_get_vulkan_driver(HDC hdc, UINT version);
