From 84437a039edc701636c20a117bca542185758ef2 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Fri, 7 May 2021 20:30:34 +0100
Subject: [PATCH 1/3] [dxgi] Add global factory for RE8

This game spams CreateDXGIFactory calls like there's no tomorrow. Cache this.
---
 src/dxgi/dxgi_main.cpp | 17 ++++++++++++++++-
 1 file changed, 16 insertions(+), 1 deletion(-)

diff --git a/src/dxgi/dxgi_main.cpp b/src/dxgi/dxgi_main.cpp
index 17530f53e..98e977772 100644
--- a/src/dxgi/dxgi_main.cpp
+++ b/src/dxgi/dxgi_main.cpp
@@ -1,11 +1,26 @@
 #include "dxgi_factory.h"
 #include "dxgi_include.h"
 
+#include "../util/util_env.h"
+
 namespace dxvk {
   
   Logger Logger::s_instance("dxgi.log");
-  
+
+  bool useGlobalFactory() {
+    static bool s_useGlobalFactory = env::getExeName() == "re8.exe";
+    return s_useGlobalFactory;
+  }
+
+  HRESULT getGlobalFactory(REFIID riid, void **ppFactory) {
+    static Com<DxgiFactory, false> s_factory = new DxgiFactory(0);
+    return s_factory->QueryInterface(riid, ppFactory);
+  }
+
   HRESULT createDxgiFactory(UINT Flags, REFIID riid, void **ppFactory) {
+    if (useGlobalFactory())
+      return getGlobalFactory(riid, ppFactory);
+
     try {
       Com<DxgiFactory> factory = new DxgiFactory(Flags);
       HRESULT hr = factory->QueryInterface(riid, ppFactory);

From 465892fdeb3a1570186b7867701fea97b5f13731 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Fri, 7 May 2021 20:42:21 +0100
Subject: [PATCH 2/3] [dxgi] Cache output display modes

Avoids enumerating them constantly.

These can't really ever change unless the output becomes invalid so this should be fairly safe to do. The current mode on the display does not affect the enumeration.
---
 src/dxgi/dxgi_output.cpp | 159 ++++++++++++++++++++++-----------------
 src/dxgi/dxgi_output.h   |  10 +++
 2 files changed, 101 insertions(+), 68 deletions(-)

diff --git a/src/dxgi/dxgi_output.cpp b/src/dxgi/dxgi_output.cpp
index bee7c493c..1e3d243bd 100644
--- a/src/dxgi/dxgi_output.cpp
+++ b/src/dxgi/dxgi_output.cpp
@@ -262,25 +262,34 @@ namespace dxvk {
     if (pNumModes == nullptr)
       return DXGI_ERROR_INVALID_CALL;
     
-    std::vector<DXGI_MODE_DESC1> modes;
+    // Special case, just return zero modes
+    if (EnumFormat == DXGI_FORMAT_UNKNOWN) {
+      *pNumModes = 0;
+      return S_OK;
+    }
 
-    if (pDesc)
-      modes.resize(std::max(1u, *pNumModes));
-    
-    HRESULT hr = GetDisplayModeList1(
-      EnumFormat, Flags, pNumModes,
-      pDesc ? modes.data() : nullptr);
-    
-    for (uint32_t i = 0; i < *pNumModes && i < modes.size(); i++) {
-      pDesc[i].Width            = modes[i].Width;
-      pDesc[i].Height           = modes[i].Height;
-      pDesc[i].RefreshRate      = modes[i].RefreshRate;
-      pDesc[i].Format           = modes[i].Format;
-      pDesc[i].ScanlineOrdering = modes[i].ScanlineOrdering;
-      pDesc[i].Scaling          = modes[i].Scaling;
+    auto lock = std::unique_lock(m_cachedModeMutex);
+
+    UINT modeCount = CacheModeList(EnumFormat, Flags);
+
+    // If requested, write out the first set of display
+    // modes to the destination array.
+    if (pDesc != nullptr) {
+      for (uint32_t i = 0; i < *pNumModes && i < modeCount; i++) {
+        pDesc[i].Width            = m_cachedModeList[i].Width;
+        pDesc[i].Height           = m_cachedModeList[i].Height;
+        pDesc[i].RefreshRate      = m_cachedModeList[i].RefreshRate;
+        pDesc[i].Format           = m_cachedModeList[i].Format;
+        pDesc[i].ScanlineOrdering = m_cachedModeList[i].ScanlineOrdering;
+        pDesc[i].Scaling          = m_cachedModeList[i].Scaling;
+      }
+      
+      if (modeCount > *pNumModes)
+        return DXGI_ERROR_MORE_DATA;
     }
     
-    return hr;
+    *pNumModes = modeCount;
+    return S_OK;
   }
   
   
@@ -298,65 +307,22 @@ namespace dxvk {
       return S_OK;
     }
 
-    // Walk over all modes that the display supports and
-    // return those that match the requested format etc.
-    DEVMODEW devMode = { };
-    devMode.dmSize = sizeof(DEVMODEW);
-    
-    uint32_t srcModeId = 0;
-    uint32_t dstModeId = 0;
-    
-    std::vector<DXGI_MODE_DESC1> modeList;
-    
-    while (GetMonitorDisplayMode(m_monitor, srcModeId++, &devMode)) {
-      // Skip interlaced modes altogether
-      if (devMode.dmDisplayFlags & DM_INTERLACED)
-        continue;
-      
-      // Skip modes with incompatible formats
-      if (devMode.dmBitsPerPel != GetMonitorFormatBpp(EnumFormat))
-        continue;
-      
-      if (pDesc != nullptr) {
-        DXGI_MODE_DESC1 mode;
-        mode.Width            = devMode.dmPelsWidth;
-        mode.Height           = devMode.dmPelsHeight;
-        mode.RefreshRate      = { devMode.dmDisplayFrequency * 1000, 1000 };
-        mode.Format           = EnumFormat;
-        mode.ScanlineOrdering = DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE;
-        mode.Scaling          = DXGI_MODE_SCALING_UNSPECIFIED;
-        mode.Stereo           = FALSE;
-        modeList.push_back(mode);
-      }
-      
-      dstModeId += 1;
-    }
-    
-    // Sort display modes by width, height and refresh rate,
-    // in that order. Some games rely on correct ordering.
-    std::sort(modeList.begin(), modeList.end(),
-      [] (const DXGI_MODE_DESC1& a, const DXGI_MODE_DESC1& b) {
-        if (a.Width < b.Width) return true;
-        if (a.Width > b.Width) return false;
-        
-        if (a.Height < b.Height) return true;
-        if (a.Height > b.Height) return false;
-        
-        return (a.RefreshRate.Numerator / a.RefreshRate.Denominator)
-             < (b.RefreshRate.Numerator / b.RefreshRate.Denominator);
-      });
-    
+    auto lock = std::unique_lock(m_cachedModeMutex);
+
+    UINT modeCount = CacheModeList(EnumFormat, Flags);
+
     // If requested, write out the first set of display
     // modes to the destination array.
     if (pDesc != nullptr) {
-      for (uint32_t i = 0; i < *pNumModes && i < dstModeId; i++)
-        pDesc[i] = modeList[i];
+      for (uint32_t i = 0; i < *pNumModes && i < modeCount; i++) {
+        pDesc[i] = m_cachedModeList[i];
+      }
       
-      if (dstModeId > *pNumModes)
+      if (modeCount > *pNumModes)
         return DXGI_ERROR_MORE_DATA;
     }
     
-    *pNumModes = dstModeId;
+    *pNumModes = modeCount;
     return S_OK;
   }
 
@@ -590,4 +556,61 @@ namespace dxvk {
     }
   }
 
+
+  UINT DxgiOutput::CacheModeList(
+            DXGI_FORMAT EnumFormat,
+            UINT        Flags) {
+    if (m_cachedModeFormat == EnumFormat)
+      return UINT(m_cachedModeList.size());
+
+    m_cachedModeList.clear();
+
+    // Walk over all modes that the display supports and
+    // return those that match the requested format etc.
+    DEVMODEW devMode = { };
+    devMode.dmSize = sizeof(DEVMODEW);
+    
+    uint32_t srcModeId = 0;
+    uint32_t dstModeId = 0;
+    
+    while (GetMonitorDisplayMode(m_monitor, srcModeId++, &devMode)) {
+      // Skip interlaced modes altogether
+      if (devMode.dmDisplayFlags & DM_INTERLACED)
+        continue;
+      
+      // Skip modes with incompatible formats
+      if (devMode.dmBitsPerPel != GetMonitorFormatBpp(EnumFormat))
+        continue;
+      
+      DXGI_MODE_DESC1 mode;
+      mode.Width            = devMode.dmPelsWidth;
+      mode.Height           = devMode.dmPelsHeight;
+      mode.RefreshRate      = { devMode.dmDisplayFrequency * 1000, 1000 };
+      mode.Format           = EnumFormat;
+      mode.ScanlineOrdering = DXGI_MODE_SCANLINE_ORDER_PROGRESSIVE;
+      mode.Scaling          = DXGI_MODE_SCALING_UNSPECIFIED;
+      mode.Stereo           = FALSE;
+      m_cachedModeList.push_back(mode);
+      
+      dstModeId += 1;
+    }
+    
+    // Sort display modes by width, height and refresh rate,
+    // in that order. Some games rely on correct ordering.
+    std::sort(m_cachedModeList.begin(), m_cachedModeList.end(),
+      [] (const DXGI_MODE_DESC1& a, const DXGI_MODE_DESC1& b) {
+        if (a.Width < b.Width) return true;
+        if (a.Width > b.Width) return false;
+        
+        if (a.Height < b.Height) return true;
+        if (a.Height > b.Height) return false;
+        
+        return (a.RefreshRate.Numerator / a.RefreshRate.Denominator)
+            < (b.RefreshRate.Numerator / b.RefreshRate.Denominator);
+      });
+
+    m_cachedModeFormat = EnumFormat;
+    return UINT(m_cachedModeList.size());
+  }
+
 }
diff --git a/src/dxgi/dxgi_output.h b/src/dxgi/dxgi_output.h
index 0dc30868d..9a5d573b6 100644
--- a/src/dxgi/dxgi_output.h
+++ b/src/dxgi/dxgi_output.h
@@ -3,6 +3,8 @@
 #include "dxgi_monitor.h"
 #include "dxgi_object.h"
 
+#include <mutex>
+
 namespace dxvk {
   
   class DxgiAdapter;
@@ -133,9 +135,17 @@ namespace dxvk {
     Com<DxgiAdapter> m_adapter = nullptr;
     HMONITOR         m_monitor = nullptr;
 
+    DXGI_FORMAT m_cachedModeFormat = DXGI_FORMAT_UNKNOWN;
+    std::vector<DXGI_MODE_DESC1> m_cachedModeList;
+    std::mutex m_cachedModeMutex;
+
     static void FilterModesByDesc(
             std::vector<DXGI_MODE_DESC1>& Modes,
       const DXGI_MODE_DESC1&              TargetMode);
+
+    UINT CacheModeList(
+            DXGI_FORMAT EnumFormat,
+            UINT        Flags);
     
   };
 

From a0fddf56a6e36440ff2a9e4b7e166834a4239031 Mon Sep 17 00:00:00 2001
From: Joshua Ashton <joshua@froggi.es>
Date: Fri, 7 May 2021 21:12:29 +0100
Subject: [PATCH 3/3] [dxgi] Add output cache

Caches DXGI outputs for a given adapter. Helps with RE8 performance.
---
 src/dxgi/dxgi_adapter.cpp | 28 +++++++++++++++++-----------
 src/dxgi/dxgi_adapter.h   |  2 ++
 2 files changed, 19 insertions(+), 11 deletions(-)

diff --git a/src/dxgi/dxgi_adapter.cpp b/src/dxgi/dxgi_adapter.cpp
index ac5463715..e2a3252b6 100644
--- a/src/dxgi/dxgi_adapter.cpp
+++ b/src/dxgi/dxgi_adapter.cpp
@@ -61,7 +61,20 @@ namespace dxvk {
     m_adapter (adapter),
     m_interop (this),
     m_index   (index) {
-    
+    for (uint32_t i = 0; ; i++) {
+      MonitorEnumInfo info;
+      info.iMonitorId = i;
+      info.oMonitor   = nullptr;
+      
+      ::EnumDisplayMonitors(
+        nullptr, nullptr, &MonitorEnumProc,
+        reinterpret_cast<LPARAM>(&info));
+      
+      if (info.oMonitor == nullptr)
+        break;
+      
+      m_outputCache.emplace_back(new DxgiOutput(m_factory, this, info.oMonitor));
+    }
   }
   
   
@@ -143,18 +156,11 @@ namespace dxvk {
     if (ppOutput == nullptr)
       return E_INVALIDARG;
     
-    MonitorEnumInfo info;
-    info.iMonitorId = Output;
-    info.oMonitor   = nullptr;
-    
-    ::EnumDisplayMonitors(
-      nullptr, nullptr, &MonitorEnumProc,
-      reinterpret_cast<LPARAM>(&info));
-    
-    if (info.oMonitor == nullptr)
+    if (Output >= m_outputCache.size())
       return DXGI_ERROR_NOT_FOUND;
     
-    *ppOutput = ref(new DxgiOutput(m_factory, this, info.oMonitor));
+    *ppOutput = ref(m_outputCache[Output].ptr());
+
     return S_OK;
   }
   
diff --git a/src/dxgi/dxgi_adapter.h b/src/dxgi/dxgi_adapter.h
index af3e47166..568a475be 100644
--- a/src/dxgi/dxgi_adapter.h
+++ b/src/dxgi/dxgi_adapter.h
@@ -122,6 +122,8 @@ namespace dxvk {
     std::unordered_map<DWORD, HANDLE> m_eventMap;
     dxvk::thread                      m_eventThread;
 
+    std::vector<Com<DxgiOutput, false>> m_outputCache;
+
     void runEventThread();
     
     struct MonitorEnumInfo {
